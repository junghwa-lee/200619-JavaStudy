package com.sist.exception;
/*
 *   예외처리
 *     - 목적 : 프로그램의 비정상 종료를 방지하고 정상상태를 유지할 수 있게 만든다
 *            (견고한 프로그램)
 *     - 정의 : 사전에 예상되는 에러를 대비하는 코드를 만든다
 *     - 자바의 모든 소스에는 예외처리가 있다 (생략가능, 생략불가능)
 *     - 프로그램을 실행하는 과정에서  오작동, 비정상적으로 종료 => 에러(오류)
 *       ** 윈도우 : 쓰레드의 충돌, 주소값 
 *       오작동, 비정상적으로수행
 *       -------------------
 *         = 프로그래머의 실수
 *         = 사용자의 오류(입력값, 작동을 잘못했을 경우) 
 *         	 ex) 33대란 
 *     
 *         
 *       에러의 종류
 *         - 컴파일 에러 : 컴파일시 에러 (문법상의 에러)
 *         - 실행시 에러 : 실행시 발생하는 에러 => 사용자의 비정상적 입력
 *         - 논리적 에러  : 실행이 되는데 동작을 다르게.. => 프로그램의 순서가 틀린 경우
 *       
 *       실제 에러 종류
 *         - 에러 : 프로그래머가 소스상에서 수정할 수 없는 에러
 *                = 메모리 부족 현상
 *                = 이클립스 에러
 *            ==> 처리 불가능 
 *                 
 *         - 예외 :  소스상에서 수정이 가능한 가벼운 에러
 *                = 사용자가 0을 입력 -> '다시 입력하시오'
 *                = 아이디 중복체크
 *                = 파일 입출력(경로명)
 *                = 서버(IP)
 *                = 오라클(오라클주소, SQL)
 *            ==> 처리 가능
 *      
 *       예외처리
 *         - Check : 컴파일러가 예외처리 했는지 확인 => 반드시 예외처리를 해야함
 *                = 파일입출력, 메모리 입출력, 네트워크 입출력
 *                = 쓰레드 충돌
 *                = 데이터베이스 연결
 *                
 *         - UnCheck : 실행시 => 컴파일러가 예외처리를 확인하지 않음 => 생략 가능 => 필요한 경우에만 예외처리
 *                = 사용자 입력 => 문자열 -> 정수변환
 *                           => 0으로 나누기
 *                           
 *       예외처리 방법 
 *        = 예외 복구** : 점프  -> 프로그래머가 예외가 발생할 경우 직접 처리 -> 정상 상태 유지
 *        			 try~catch~finally
 *          		 ==> 직접처리
 *        = 예외 회피** : 다른 메소드 전송 => 자바 시스템에 의해 처리
 *                   throws
 *                   ==> 간접처리
 *        = 예외 임의발생 : 테스트용
 *        				throw
 *        = 사용자 정의 예외 : 자바라이브러리에서 전체 에러를 지원하지 않는 경우
 *          -----------
 *           => 직접 데이터형 제작 (클래스)
 *           => 메소드 => 사용자가 직접 제작
 *           => 연산자, 제어문 ==> X                    
 *                          
 *      
 *       예외처리 - 예외복구
 *       try ~ catch ~ (finally)
 *       	try : 평상시 자바 코딩 => 에러
 *      	catch : 에러 발생시 처리 부분 ==> 여러 개 사용 가능
 *      	finally : 에러발생 여부 상관 없이 무조건 수행되는 문장 
 *                    네트워크, 데이터베이스 프로그램에서 반드시 존재
 *                    서버를 연결 해제 ==> 디도스발생
 *                 
 *          1) 전체 예외처리
 *          2) 부분 예외처리
 *          
 *          try
 *          {
 *             for(int i=0;i<10;i++)
 *             {
 *                i==3 error  ==> 0,1,2만 수행
 *             } ==> 종료
 *             
 *          }catch(Exception e){}   
 *         
 *          for(int i=0;i<10;i++)
 *          {
 *         		 try
 *         		 {
 *             		i==3 error  ==> 0,1,2 , 3제외하고 4~9 
 *           	 }catch(Exception e){}   ==> i++이동  
 *          }        
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		try
		{
			int a=10; //1
			int b=0;   //2
			int c=a/b;  //3  ==> error ==> catch 이동
			System.out.println("c"+c); // 실행 안되는 문장
		}
		catch(Exception ex)
		{
			System.out.println("0으로 나눌 수 없습니다"); //4
		}
		System.out.println("프로그램 정상 종료"); //5
		
		
		//예외처리가 없는 상태
		/*
		int a=10;
		int b=0;
		int c=a/b;  // error => 종료
		System.out.println("c="+c);
		System.out.println("정상적으로 프로그램 종료!!");
		*/
		
		
		
		
		
		
		
		
	}

}
