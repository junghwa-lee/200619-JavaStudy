/*
 *  클래스의 구성요소
 *    멤버변수
 *    생성자
 *    메소드
 *    
 *  객체지향의 3대 요소
 *     ※ 데이터 보호(데이터 사용하지 못하게 만드는 작업 => 은닉화
 *    		         클래스와 클래스의 연결 -> 감춘 데이터를 메소드를 통해서 접근 가능 => 캡슐화)
 *     
 *   1) 접근지정어
 *       			 같은 클래스		같은 폴더		다른 폴더		모든 클래스
 *        						(패키지)	   상속을 받는 경우	
 *     -----------------------------------------------------------
 *       public			O		  O			  O				O
 *       protected		O		  O		  	  O				X
 *       default		O		  O		  	  X				X
 *       private		O		  X		  	  X				X
 *        
 *        ●접근 범위 크기
 *         public > protected > default > private
 *        
 *        - public : 공개(전체) => 어떤 위치든 상관 없이 사용 가능
 *           ex) public int age;
 *        - protected : 상속을 받는 경우에 하위클래스에서 사용 가능(사용빈도가 작다)
 *           ex) protected int String name;
 *         	 ※상속에서 예외 조건
 *            static => 사용이 가능하게 만든다
 *            private => 상속이 된다 => 사용 불가능
 *            생성자 =>  상속이 되지 않는다
 *        - default : 같은 패키지 안에서만 사용 가능 => src
 *        	 ex) String name;
 *        - private : 자신의 클래스에서만 사용 가능 => 비공개
 *        			  => 다른 클래스에서도 사용 가능 => 메소드를 통해 접근 가능하게 만듦 (getter, setter)
 *           
 *        ●사용방식
 *          멤버변수
 *          ===== 멤 : 다른 클래스에서 값을 변경할 수 없게 은닉화 => private
 *          메소드
 *          생성자
 *          ===== 메&생 : 다른 클래스와 연결해서 프로그램이 동작 => public
 *        
 *        -----------------------------------------------------------
 *        1. 데이터 보호 : 값이 프로그램과 관렵없이 변질, 값 변경될 수도 있음
 *            => 캡슐화
 *               1) 데이터 보호하는 목적
 *                  데이터 은닉화 => 필요할 때만  메소드 이용해서 사용
 *               2) 경계구분
 *   
 *   2) 재사용 기법
 *      - 상속 : is-a
 *      - 포함 : has-a
 *      
 *   3) 다형성 (수정, 추가)
 *      - 오버로딩 : 새로운 기능 추가
 *        - 오버라이딩 : 기존에 있던 기능 수정
 *      ==================================
 *      유지보수가 용이하게 만드는 기법    
 *      => 실행속도가 늦다(객체지향)
 *      ========================POJO(Spring)
 *      
 *      
 * 
 */
public class 캡슐화 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
